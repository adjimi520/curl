name: Node.js CI

on:
    push:
        branches: ['main'] # 只在 main 分支推送时触发
    pull_request:
        branches: ['*'] # 对所有 PR 触发

jobs:
    build-and-test:
        runs-on: ubuntu-latest
        steps:
            # 1. 检出代码
            - name: Checkout repository
              uses: actions/checkout@v3

            # 2. 设置 Node.js 环境
            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20' # 指定 Node.js 版本（如 18、20、latest）
                  cache: 'npm' # 缓存 npm 依赖，加速后续构建

            # 3. 安装依赖
            - name: Install dependencies
              run: npm ci # 使用 `npm ci` 而不是 `npm install`（更严格，适合 CI）

            # 4. 运行测试
            - name: Run tests
              run: npm test # 执行 package.json 中的 "test" 脚本

            # 5. 构建项目（如果有）
            - name: Build
              run: npm run build # 执行 package.json 中的 "build" 脚本（如 TypeScript 编译）
              if: success() # 仅在测试通过后构建

            # 6. 上传构建产物（可选）
            - name: Upload artifact
              uses: actions/upload-artifact@v3
              if: success()
              with:
                  name: dist
                  path: dist/ # 替换为你的构建输出目录（如 dist、build）

    # 7. 发布到 npm（可选，需配置 Secrets）
    publish:
        needs: build-and-test # 依赖 build-and-test 任务
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main' # 仅 main 分支触发发布
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version: '20'
                  registry-url: 'https://registry.npmjs.org'
            - run: npm ci
            - run: npm publish # 发布到 npm
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} # 需在仓库 Secrets 中配置
